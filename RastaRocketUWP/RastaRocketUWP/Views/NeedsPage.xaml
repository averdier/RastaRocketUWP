<Page
    x:Class="RastaRocketUWP.Views.NeedsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:RastaRocketUWP.Views"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:toolkit="using:Microsoft.Toolkit.Uwp.UI.Controls"
    xmlns:models="using:RastaRocketUWP.Models"
    xmlns:controls="using:RastaRocketUWP.Controls"
    xmlns:valueConverters="using:RastaRocketUWP.ValueConverters"
    xmlns:ic="using:Microsoft.Xaml.Interactions.Core"
    xmlns:i="using:Microsoft.Xaml.Interactivity"
    mc:Ignorable="d">

    <Page.Transitions>
        <TransitionCollection>
            <NavigationThemeTransition />
        </TransitionCollection>
    </Page.Transitions>

    <Page.Resources>
        <valueConverters:StateToSolidColorBrush x:Key="StateToSolidColorBrush" />
        <valueConverters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <valueConverters:DateTimeConverter x:Key="DateTimeConverter" />

        <DataTemplate x:Name="NeedListViewTemplate" x:DataType="models:NeedModel">
            <Grid HorizontalAlignment="Stretch">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Ellipse x:Name="Ellipse"
                         Grid.RowSpan="2"
                         Width ="32"
                         Height="32"
                         Margin="6"
                         VerticalAlignment="Center"
                         HorizontalAlignment="Center"
                         Fill="{x:Bind Status, Mode=OneWay, Converter={StaticResource StateToSolidColorBrush}}"/>
                <TextBlock Grid.Column="1"
                           Text="{x:Bind Title}" 
                           x:Phase="1"  
                           Style="{ThemeResource BaseTextBlockStyle}"
                           Margin="12,6,0,0"/>
                <TextBlock  Grid.Column="1"
                            Grid.Row="1"
                            Text="{x:Bind Created_At, Mode=OneWay, Converter={StaticResource DateTimeConverter}}" 
                            x:Phase="2"
                            Style="{ThemeResource BodyTextBlockStyle}"
                            Margin="12,0,0,6"/>
            </Grid>
        </DataTemplate>
        
    </Page.Resources>

    <Grid x:Name="ContentArea"
          Margin="0">

        <Grid.RowDefinitions>
            <RowDefinition x:Name="TitleRow" Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition x:Name="MasterColumn" Width="320" />
            <ColumnDefinition x:Name="DetailColumn" Width="*" />
        </Grid.ColumnDefinitions>

        <TextBlock
            x:Name="TitlePage"
            x:Uid="NeedsPage_Title"
            Text="PageTitle"
            Grid.ColumnSpan="2"
            FontSize="28" FontWeight="SemiLight" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" VerticalAlignment="Center"
            Margin="12,0,12,7" Visibility="Collapsed"/>

        <ContentPresenter
            x:Name="LoadingContentPresenter"
            Visibility="{x:Bind ViewModel.IsLoading, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"
            Grid.Row="1"
            Grid.RowSpan="2"
            Grid.ColumnSpan="{x:Bind ViewModel.LoadingColumnSpan}">
            <controls:LoadingControl x:Name="LoadingControl"
                                     Message="{x:Bind ViewModel.LoadingMessage, Mode=OneWay}"
                                     IsLoading="{x:Bind ViewModel.IsLoading, Mode=OneWay}"/>
        </ContentPresenter>


        <Grid
            x:Name="MasterArea"
            Grid.Row="1"
            Grid.Column="0"
            Visibility="{x:Bind ViewModel.IsLoading, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=True}">

            <Grid.RowDefinitions>
                <RowDefinition x:Name="MasterRow" Height="48"/>
                <RowDefinition x:Name="SearchRow" Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <TextBlock
                x:Name="Title"
                x:Uid="NeedsPage_Title"
                Text="PageTitle"
                Grid.ColumnSpan="2"
                FontSize="28" FontWeight="SemiLight" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" VerticalAlignment="Center"
                Margin="12,0,12,7"/>

            <toolkit:Expander x:Name="SearchExpander"
                              x:Uid="SearchExpander_Title"
                              Grid.Row="1"
                              Margin="0,0,0,10" 
                              Header="Header"
                              Foreground="White"
                              HorizontalContentAlignment="Stretch"
                              Background="Gray"
                              IsExpanded="False"
                              ExpandDirection="Down">
                <Grid Margin="10,0,10,20">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <StackPanel Orientation="Vertical">
                        <TextBlock Text="Title" 
                               Style="{ThemeResource SubtitleTextBlockStyle}"/>

                        <TextBox x:Uid="NeedAddPage_NeedTitle" 
                                 Margin="0,10,0,0"
                                 PlaceholderText="Header" 
                                 Text="{x:Bind ViewModel.SearchTitle, Mode=TwoWay}"/>
                    </StackPanel>

                    <StackPanel Orientation="Vertical"
                                Grid.Row="1"
                                Margin="0,5,0,0">

                        <TextBlock Text="Statut" 
                               Style="{ThemeResource SubtitleTextBlockStyle}"/>

                        <ComboBox x:Name="StatusComboBoxChoice"
                                      Margin="0,10,0,0"
                                      HorizontalAlignment="Stretch"
                                      ItemsSource="{x:Bind ViewModel.PossibleStatus, Mode=OneWay}">
                            <i:Interaction.Behaviors>
                                <ic:EventTriggerBehavior EventName="SelectionChanged">
                                    <ic:InvokeCommandAction Command="{x:Bind ViewModel.StatusSelectionChangedCommand}" />
                                </ic:EventTriggerBehavior>
                            </i:Interaction.Behaviors>
                        </ComboBox>

                    </StackPanel>

                    <StackPanel Orientation="Vertical"
                                Grid.Row="2"
                                Margin="0,10,0,0">
                        <TextBlock Text="Date" 
                                   Style="{ThemeResource SubtitleTextBlockStyle}"/>

                        <CalendarDatePicker x:Name="StartAtLatestDatePicker"
                                            HorizontalAlignment="Stretch"
                                            Margin="0,10,0,0"/>
                    </StackPanel>
                </Grid>
            </toolkit:Expander>

            <toolkit:PullToRefreshListView
                    Grid.Row="2"
                    x:Name="ListView"
                    Background="White"
                    OverscrollLimit="0.4"
                    PullThreshold="100"
                    IsItemClickEnabled="True"
                    ItemsSource="{x:Bind ViewModel.NeedsItems}"
                    ItemTemplate="{StaticResource NeedListViewTemplate }"
                    RefreshCommand="{x:Bind ViewModel.PullRefreshItemsCommand}"
                    ItemClick="{x:Bind ViewModel.OnItemClick}"
                    IsPullToRefreshWithMouseEnabled="True">
                
                <toolkit:PullToRefreshListView.PullToRefreshContent>
                    <TextBlock FontSize="16"
                               Opacity="0.5"
                               Text="Pull down to refresh data" />
                </toolkit:PullToRefreshListView.PullToRefreshContent>
            </toolkit:PullToRefreshListView>

        </Grid>

        <ContentPresenter 
                x:Name="DetailContentPresenter"
                Visibility="{x:Bind ViewModel.IsViewState, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"
                Grid.Row="1"
                Grid.Column="1"
                BorderThickness="1,0,0,0"
                Padding="24,0,0,0"
                BorderBrush="{ThemeResource SystemControlForegroundBaseLowBrush}">
            <controls:NeedDetailControl x:Name="DetailControl" MasterMenuItem="{x:Bind ViewModel.Selected, Mode=OneWay}"/>
        </ContentPresenter>

        <CommandBar Grid.Row="2"
                    Grid.ColumnSpan="2">
            <AppBarButton x:Name="RefreshItemsBtn"
                          Label="Refresh"
                          Icon="Refresh"
                          Command="{x:Bind ViewModel.RefreshItemsClickCommand}"/>
            <AppBarButton x:Name="AddItemBtn" 
                          Label="Add Item" 
                          Icon="Add" 
                          Command="{x:Bind ViewModel.AddItemClickCommand}"/>

            <AppBarButton x:Name="DeleteItemBtn" 
                          Label="Delete Item" 
                          Icon="Delete" 
                          Visibility="{x:Bind ViewModel.IsViewState, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"
                          Command="{x:Bind ViewModel.DeleteItemClickCommand}"/>

            <AppBarButton x:Name="EditItemBtn"
                          Label="Edit item"
                          Icon="Edit" 
                          Visibility="{x:Bind ViewModel.IsViewState, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        </CommandBar>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="WindowStates">
                <i:Interaction.Behaviors>
                    <ic:EventTriggerBehavior EventName="CurrentStateChanged">
                        <ic:InvokeCommandAction Command="{x:Bind ViewModel.StateChangedCommand}"/>
                    </ic:EventTriggerBehavior>
                </i:Interaction.Behaviors>
                <VisualState x:Name="WideState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="640"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="MasterColumn.Width" Value="320" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NarrowState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="TitlePage.Margin" Value="48,0,12,7"/>
                        <Setter Target="TitleRow.Height" Value="48"/>
                        <Setter Target="MasterRow.Height" Value="Auto"/>
                        <Setter Target="TitlePage.Visibility" Value="Visible"/>
                        <Setter Target="Title.Visibility" Value="Collapsed"/>
                        <Setter Target="MasterArea.Background" Value="{ThemeResource SystemControlBackgroundAltHighBrush}"/>
                        <Setter Target="MasterColumn.Width" Value="*" />
                        <Setter Target="DetailColumn.Width" Value="0" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        
    </Grid>
</Page>
